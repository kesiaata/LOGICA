							EXEMPLO 1

programa
{
	inteiro x, y, aux
	
	funcao inicio()
	{
		x = 15
		y = 22

		//Algoritmo de troca de valores
		aux = y
		y = x
		x = aux

		escreva("x vale: "+ x+ "\n")
		escreva("y vale: "+ y)
	}
}


							EXEMPLO 2
programa
{
	
	inteiro vet[3]
	inteiro cont, contA, contB, aux
	
	funcao inicio()
	{
		//Preencher o array
		para (cont = 0; cont <= 2; cont++){
			escreva("Digite um número: ")
			leia(vet[cont])
		}
		//Ordenar o array criado
		para(contA = 0; contA <= 2; contA++){
			para(contB = contA + 1; contB <= 2; contB++){
				se(vet[contA] > vet[contB]){
					aux = vet[contB]
					vet[contB] = vet[contA]
					vet[contA] = aux
				}
			}
		}
		//Exibir o array ordenado
		para(cont = 0; cont<= 2; cont++){
			escreva(vet[cont]+ "\n")
		}
	}
}

							EX. EM ORDEM DECRESCENTE

programa
{
	
inteiro vet[10]
	inteiro cont, num, contA, contB, aux
	
	funcao inicio()
	{
		//Preencher o array
		para (cont = 0; cont <= 9; cont++){
			escreva("Digite um número: ")
			leia(vet[cont])
		}
		//Ordenar o array criado
		para(contA = 0; contA <= 9; contA++){
			para(contB = contA + 1; contB <= 9; contB++){
				se(vet[contA] < vet[contB]){
					aux = vet[contB]
					vet[contB] = vet[contA]
					vet[contA] = aux
				}
			}
		}
		//Exibir o array ordenado
		para(cont = 0; cont <= 9; cont++){
			escreva(vet[cont]+ "\n")
		}
	}
}

					EXEMPLO SORTEANDO NUM. ALEATORIOS E ORDENANDO


programa
{
	inclua biblioteca Util --> u
	inteiro vet[6]
	inteiro cont, contA, contB, aux, alea, inicial = 1, final = 100
	
	funcao inicio()
	{
		
		escreva("Números aleatórios sorteados:\n")
		
		//Preencher o array
		para (cont = 0; cont <= 5; cont++){
			alea = u.sorteia(inicial, final)
			vet[cont] = alea
		}
		//Ordenar o array criado
		para(contA = 0; contA <= 5; contA++){
			para(contB = contA + 1; contB <= 5; contB++){
				se(vet[contA] > vet[contB]){
					aux = vet[contB]
					vet[contB] = vet[contA]
					vet[contA] = aux
				}
			}
		}
		//Exibir o array ordenado
		para(cont = 0; cont <= 5; cont++){
			escreva(vet[cont]+ " ")
		}
	}
}


