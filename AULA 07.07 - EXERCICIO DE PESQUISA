                                                 EXERCICIO DE FIXAÇÃO
                                      
                                      
1. Analisador de performance de algoritmos

Crie um algoritmo que gere 1000 números aleatoriamente, no intervalo de 1 a 2000.
O programa deve implementar dois algoritmos de pesquisa:
- Pesquisa Linear
- Pesquisa Binária
O usuário pede para pesquisar um número na lista criada, e o programa deve efetuar a pesquisa duas vezes: uma vez com cada algoritmo.
Cronometre o tempo que o programa leva para encontrar (ou não) o número em cada caso.
Opcionalmente: Existe uma função denominada "tempo_decorrido()" na biblioteca Util do Portugol. Tente usar essa função para contar o tempo decorrido em cada caso, em vez de cronometrar manualmente.
Logo após, responda à seguinte pergunta:
- "Qual dos algoritmos retornou um resultado mais rapidamente?"

                                                  RESOLVIDO

programa
{//1. Analisador de performance de algoritmos

//Crie um algoritmo que gere 1000 números aleatoriamente, no intervalo de 1 a 2000. O programa deve implementar dois algoritmos de pesquisa:
//- Pesquisa Linear
//- Pesquisa Binária
//O usuário pede para pesquisar um número na lista criada, e o programa deve efetuar a pesquisa duas vezes: uma vez com cada algoritmo.
//Cronometre o tempo que o programa leva para encontrar (ou não) o número em cada caso.
//Opcionalmente: Existe uma função denominada "tempo_decorrido()" na biblioteca Util do Portugol. Tente usar essa função para contar o tempo decorrido em cada caso, 
//em vez de cronometrar manualmente.
//Logo após, responda à seguinte pergunta: - "Qual dos algoritmos retornou um resultado mais rapidamente?"
	
	
	inclua biblioteca Util --> u
	inteiro alea, vetAlea[1000], cont
	inteiro busca, pos, contA, contB, aux

	inteiro tempo_inicial = 0
	inteiro tempo_atual = 0
	inteiro tempo_total = 0

	
	funcao inicio()
	{
	//Armazenando números aleatorios no vetor
		para (cont = 0; cont < 1000; cont++){
		alea = u.sorteia(1, 2000)
		vetAlea[cont] = alea
		//escreva(alea+ " ")
		}
	//Pesquisa linear no vetor
		escreva("Digite um valor à ser pesquisado no vetor: ")
		leia(busca)
		pos = 0
		
		tempo_inicial = u.tempo_decorrido()
		enquanto((pos < 999) e (vetAlea[pos] != busca)){
			pos++
		}
		se(vetAlea[pos] == busca){
			escreva("Número existente no array!\n")	
		}
		senao{
			escreva("Número inexistente!!\n")
		}
			tempo_atual = u.tempo_decorrido()
			tempo_total = tempo_atual - tempo_inicial
			escreva("Pesquisa Linear, Tempo Total: ", tempo_total, "\n")
		
	//Ordenando o vetor criado
		tempo_inicial = u.tempo_decorrido()
		para(contA = 0; contA < 1000; contA++){
			para(contB = contA + 1; contB < 1000; contB++){
				se(vetAlea[contA] > vetAlea[contB]){
					aux = vetAlea[contB]
					vetAlea[contB] = vetAlea[contA]
					vetAlea[contA] = aux
				}
			}
		}
			tempo_atual = u.tempo_decorrido()
			tempo_total = tempo_atual - tempo_inicial
			escreva("A ordenação demorou, Tempo Total: ", tempo_total, "\n")
	//Verificando se o vetor está ordenado
		//para(contA = 0; contA < 1000; contA++){
			//escreva(vetAlea[contA]+ " ")
		//}
	//Pesquisa binaria no vetor
		inteiro inicial = 0
		inteiro final = 999
		inteiro meio
		logico encontrado = falso

		tempo_inicial = u.tempo_decorrido()
		enquanto((inicial <= final) e (nao encontrado)){
			meio = (inicial + final) / 2
			se(vetAlea[meio] == busca){
				encontrado = verdadeiro
			}
			senao se(vetAlea[meio] > busca){
				final = meio - 1
			}
			senao{
				inicial = meio + 1
			}
		}
		se(encontrado == verdadeiro){	
		}
			tempo_atual = u.tempo_decorrido()
			tempo_total = tempo_atual - tempo_inicial
			escreva("Pesquisa Binaria, Tempo Total: ", tempo_total, "\n")
	}
}
